{"version":3,"sources":["img/persik.png","panels/Persik.js","panels/Posts.js","panels/Сatalog.js","api.js","App.js","index.js"],"names":["module","exports","platform","Posts","id","go","fetchedUser","Сatalog","props","setPopout","userArr","useState","fetching","setFetching","getUser","userID","connect","send","useEffect","size","fetch","then","response","json","data","arr","i","length","push","content","$t","join","getUserId","feed","entry","getTable","console","log","onRefresh","min","max","setTimeout","Math","floor","random","description","separator","asideContent","isFetching","map","p","key","target","href","className","before","src","photo_50","first_name","last_name","App","activeView","setActiveView","activePanel","setActivePanel","setUser","popout","setUserArr","a","user","subscribe","detail","type","schemeAttribute","document","createAttribute","value","scheme","body","attributes","setNamedItem","fetchData","e","currentTarget","dataset","to","activeStory","tabbar","onClick","selected","ReactDOM","render","getElementById"],"mappings":"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","file":"static/js/main.73d18180.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/persik.4e1ec840.png\";","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { platform, IOS } from '@vkontakte/vkui';\nimport Panel from '@vkontakte/vkui/dist/components/Panel/Panel';\nimport PanelHeader from '@vkontakte/vkui/dist/components/PanelHeader/PanelHeader';\nimport HeaderButton from '@vkontakte/vkui/dist/components/HeaderButton/HeaderButton';\nimport Icon28ChevronBack from '@vkontakte/icons/dist/28/chevron_back';\nimport Icon24Back from '@vkontakte/icons/dist/24/back';\n\nimport persik from '../img/persik.png';\nimport './Persik.css';\n\nconst osName = platform();\n\nconst Persik = props => (\n\t<Panel id={props.id}>\n\t\t<PanelHeader\n\t\t\tleft={<HeaderButton onClick={props.go} data-to=\"home\">\n\t\t\t\t{osName === IOS ? <Icon28ChevronBack/> : <Icon24Back/>}\n\t\t\t</HeaderButton>}\n\t\t>\n\t\t\tPersik\n\t\t</PanelHeader>\n\t\t<img className=\"Persik\" src={persik} alt=\"Persik The Cat\"/>\n\t</Panel>\n);\n\nPersik.propTypes = {\n\tid: PropTypes.string.isRequired,\n\tgo: PropTypes.func.isRequired,\n};\n\nexport default Persik;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport Panel from '@vkontakte/vkui/dist/components/Panel/Panel';\nimport PanelHeader from '@vkontakte/vkui/dist/components/PanelHeader/PanelHeader';\nimport Button from '@vkontakte/vkui/dist/components/Button/Button';\nimport Group from '@vkontakte/vkui/dist/components/Group/Group';\nimport Cell from '@vkontakte/vkui/dist/components/Cell/Cell';\nimport Div from '@vkontakte/vkui/dist/components/Div/Div';\nimport Avatar from '@vkontakte/vkui/dist/components/Avatar/Avatar';\n\nconst Posts = ({ id, go, fetchedUser }) => (\n\t<Panel id={id}>\n\t\t<PanelHeader>Лента</PanelHeader>\n\t\t<Group>\n\t\t\t<Div>\n\t\t\t\tтут посты всякие\n\t\t\t</Div>\n\t\t</Group>\n\t</Panel>\n);\n\nPosts.propTypes = {\n\tid: PropTypes.string.isRequired,\n\tgo: PropTypes.func.isRequired,\n\tfetchedUser: PropTypes.shape({\n\t\tphoto_200: PropTypes.string,\n\t\tfirst_name: PropTypes.string,\n\t\tlast_name: PropTypes.string,\n\t\tcity: PropTypes.shape({\n\t\t\ttitle: PropTypes.string,\n\t\t}),\n\t}),\n};\n\nexport default Posts;\n","import React, {useEffect, useState} from 'react';\nimport PropTypes from 'prop-types';\nimport Panel from '@vkontakte/vkui/dist/components/Panel/Panel';\nimport PanelHeader from '@vkontakte/vkui/dist/components/PanelHeader/PanelHeader';\nimport Button from '@vkontakte/vkui/dist/components/Button/Button';\nimport Group from '@vkontakte/vkui/dist/components/Group/Group';\nimport Cell from '@vkontakte/vkui/dist/components/Cell/Cell';\nimport Div from '@vkontakte/vkui/dist/components/Div/Div';\nimport Avatar from '@vkontakte/vkui/dist/components/Avatar/Avatar';\nimport Header from '@vkontakte/vkui/dist/components/Header/Header';\nimport Switch from '@vkontakte/vkui/dist/components/Switch/Switch';\nimport PullToRefresh from '@vkontakte/vkui/dist/components/PullToRefresh/PullToRefresh';\nimport List from '@vkontakte/vkui/dist/components/List/List';\nimport {GoogleSpreadsheet} from \"google-spreadsheet\";\nimport connect from \"@vkontakte/vk-connect\";\nimport {getTable} from \"../api\";\nimport ScreenSpinner from \"@vkontakte/vkui/dist/components/ScreenSpinner/ScreenSpinner\";\n\nconst getRandomInt = (min, max) => {\n    return Math.floor(Math.random() * (max - min)) + min;\n}\n\n\nconst Сatalog = (props) => {\n\n    const {id, setPopout, userArr} = props\n    const [fetching, setFetching] = useState(false)\n    const [showUsers, setShowUsers] = useState([])\n\n\n    const getUser = (userID) => {\n        connect.send(\"VKWebAppCallAPIMethod\", {\n            \"method\": \"users.get\",\n            \"request_id\": \"getUsers\",\n            \"params\": {\n                \"user_ids\": userID,\n                \"v\": \"5.103\",\n                \"fields\": 'photo_50',\n                \"access_token\": '85685eaa85685eaa85685eaa2d8504b3b58856885685eaad8e8ae5c720f4db08e7e9ee0',\n                'lang' : \"ru\"\n            }\n        });\n    }\n\n    useEffect(() => {\n        setPopout(<ScreenSpinner size='large' />)\n        getTable(getUser)\n    }, []);\n\n\n    // useEffect(() => {\n    //     if (showUsers && showUsers.length > 0) {\n    //         async function fetchUser() {\n    //             const user = await connect.send(\"VKWebAppCallAPIMethod\", {\n    //                 \"method\": \"users.get\",\n    //                 \"request_id\": \"getUsers\",\n    //                 \"params\": {\n    //                     \"user_ids\": showUsers,\n    //                     \"v\": \"5.103\",\n    //                     \"fields\": 'photo_50',\n    //                     \"access_token\": '85685eaa85685eaa85685eaa2d8504b3b58856885685eaad8e8ae5c720f4db08e7e9ee0'\n    //                 }\n    //             });\n    //             setUserArr(user);\n    //             // setPopout(null);\n    //         }\n    //         fetchUser();\n    //     }\n    // }, [showUsers]);\n    //\n    console.log(userArr)\n\n\n    const people = [\n        {\n            id: 15267742,\n            photo_50: \"https://pp.userapi.com/c841034/v841034569/3b8c1/pt3sOw_qhfg.jpg\",\n            first_name: \"Артур\",\n            last_name: 'Стамбульцян'\n        },\n        {\n            id: 15267742,\n            photo_50: \"https://pp.userapi.com/c845121/v845121950/63c02/4hP61FL56YM.jpg?ava=1\",\n            first_name: \"Тимофей\",\n            last_name: 'Чаптыков'\n        },\n        {\n            id: 15267742,\n            photo_50: \"https://pp.userapi.com/c834100/v834100961/4f8f1/hjsBzq433co.jpg?ava=1\",\n            first_name: \"Влад\",\n            last_name: 'Анесов'\n        },\n    ]\n\n    const onRefresh = () => {\n        setFetching(true)\n\n        setTimeout(() => {\n            setFetching(false)\n            // this.setState({\n            // \titems: [this.getNewItem(), ...this.state.items],\n            // \tfetching: false\n            // });\n        }, getRandomInt(600, 2000));\n    }\n\n\treturn <Panel id={id}>\n\t\t<PanelHeader>Каталог художников</PanelHeader>\n\t\t<Group description=\"Вы будете получать только важные уведомления\"\n\t\t\t   separator=\"show\">\n\t\t\t<Cell asideContent={<Switch/>}>\n\t\t\t\tPush-уведомления\n\t\t\t</Cell>\n\t\t</Group>\n\t\t<PullToRefresh onRefresh={() => onRefresh()} isFetching={fetching}>\n\t\t\t<Group>\n\t\t\t\t<List>\n                    {userArr.map((p, i) => <a key={i} target='_blank' href={`https://vk.com/id${p.id}`} className='link-decoration'><Cell\n                                                   before={<Avatar src={p.photo_50}/>}\n                    >{p.first_name} {p.last_name}</Cell></a>)}\n\t\t\t\t</List>\n\t\t\t</Group>\n\t\t</PullToRefresh>\n\t</Panel>\n\n}\n\n\nСatalog.propTypes = {\n    id: PropTypes.string.isRequired,\n    go: PropTypes.func.isRequired,\n    fetchedUser: PropTypes.shape({\n        photo_200: PropTypes.string,\n        first_name: PropTypes.string,\n        last_name: PropTypes.string,\n        city: PropTypes.shape({\n            title: PropTypes.string,\n        }),\n    }),\n};\n\nexport default Сatalog;\n","\r\nconst getUserId = (data) => {\r\n    let arr = []\r\n    for (let i = 0; i < data.length; i++) {\r\n        arr.push(data[i].content.$t)\r\n    }\r\n    return arr.join(',')\r\n}\r\n\r\n\r\nexport const getTable = (getUser) => {\r\n    fetch('https://spreadsheets.google.com/feeds/cells/1SX9lV4-URRyErZJT-tDc6-A4vbpMzTniQKtUsRk10kg/1/public/full?alt=json')\r\n        .then(function(response) {\r\n            return response.json();\r\n        })\r\n        .then(function(data) {\r\n            if(data) {\r\n                // setShowUsers(getUserId(data.feed.entry))\r\n                getUser(getUserId(data.feed.entry))\r\n            }\r\n        })\r\n}\r\n\r\n\r\n","import React, { useState, useEffect } from 'react';\nimport connect from '@vkontakte/vk-connect';\nimport View from '@vkontakte/vkui/dist/components/View/View';\nimport ScreenSpinner from '@vkontakte/vkui/dist/components/ScreenSpinner/ScreenSpinner';\nimport '@vkontakte/vkui/dist/vkui.css';\nimport './App.css'\nimport Home from './panels/Home';\nimport Persik from './panels/Persik';\nimport Epic from \"@vkontakte/vkui/dist/components/Epic/Epic\";\nimport Tabbar from '@vkontakte/vkui/dist/components/Tabbar/Tabbar';\nimport TabbarItem from '@vkontakte/vkui/dist/components/TabbarItem/TabbarItem';\nimport Icon28Newsfeed from '@vkontakte/icons/dist/28/newsfeed';\nimport Icon28More from '@vkontakte/icons/dist/28/more';\nimport Posts from \"./panels/Posts\";\nimport Сatalog from \"./panels/Сatalog\";\n\nconst App = () => {\n\tconst [activeView, setActiveView] = useState('post');\n\tconst [activePanel, setActivePanel] = useState('home');\n\tconst [fetchedUser, setUser] = useState(null);\n\tconst [popout, setPopout] = useState(<ScreenSpinner size='large' />);\n\tconst [userArr,setUserArr] = useState([])\n\n\n\tuseEffect(() => {\n\t\tconnect.subscribe(({ detail: { type, data }}) => {\n\t\t\tif (type === 'VKWebAppUpdateConfig') {\n\t\t\t\tconst schemeAttribute = document.createAttribute('scheme');\n\t\t\t\tschemeAttribute.value = data.scheme ? data.scheme : 'client_light';\n\t\t\t\tdocument.body.attributes.setNamedItem(schemeAttribute);\n\t\t\t}\n\t\t\tif (type === 'VKWebAppCallAPIMethodResult') {\n\t\t\t\tsetPopout(null)\n\t\t\t\tsetUserArr(data.response)\n\t\t\t}\n\t\t});\n\t\tasync function fetchData() {\n\t\t\tconst user = await connect.send('VKWebAppGetUserInfo');\n\t\t\tsetUser(user);\n\t\t\tsetPopout(null);\n\t\t}\n\t\tfetchData();\n\t}, []);\n\n\tconst go = e => {\n\t\tsetActivePanel(e.currentTarget.dataset.to);\n\t};\n\n\treturn (\n\t\t<Epic activeStory={activeView} tabbar={\n\t\t\t<Tabbar>\n\t\t\t\t<TabbarItem\n\t\t\t\t\tonClick={() => setActiveView('post')}\n\t\t\t\t\tselected={activeView === 'post'}\n\t\t\t\t\t// text=\"Новости\"\n\t\t\t\t><Icon28Newsfeed /></TabbarItem>\n\t\t\t\t<TabbarItem\n\t\t\t\t\tonClick={() => setActiveView('catalog')}\n\t\t\t\t\tselected={activeView === 'catalog'}\n\t\t\t\t\t// text=\"Каталог художников\"\n\t\t\t\t><Icon28More /></TabbarItem>\n\t\t\t</Tabbar>\n\t\t}>\n\t\t\t<View activePanel={activePanel} popout={popout} id=\"post\">\n\t\t\t\t<Posts id='home' fetchedUser={fetchedUser} go={go} />\n\t\t\t</View>\n\t\t\t<View activePanel={activePanel} popout={popout} id=\"catalog\">\n\t\t\t\t<Сatalog setPopout={setPopout} id='home' fetchedUser={fetchedUser} go={go} userArr={userArr}/>\n\t\t\t</View>\n\t\t</Epic>\n\t);\n}\n\nexport default App;\n\n","import 'core-js/features/map';\nimport 'core-js/features/set';\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport connect from '@vkontakte/vk-connect';\nimport App from './App';\n// import registerServiceWorker from './sw';\n\n// Init VK  Mini App\nconnect.send('VKWebAppInit');\n\n// Если вы хотите, чтобы ваше веб-приложение работало в оффлайне и загружалось быстрее,\n// расскомментируйте строку с registerServiceWorker();\n// Но не забывайте, что на данный момент у технологии есть достаточно подводных камней\n// Подробнее про сервис воркеры можно почитать тут — https://vk.cc/8MHpmT\n// registerServiceWorker();\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}